// Additional test cases written by the team to test the functionalities of the api
// commented out as they are not formatted to run with mvnw test



// package csd.api.modules;

// import static org.junit.jupiter.api.Assertions.assertEquals;

// import org.junit.jupiter.api.BeforeAll;
// import org.junit.jupiter.api.Order;
// import org.junit.jupiter.api.Test;
// import org.junit.jupiter.api.TestMethodOrder;
// import org.junit.jupiter.api.MethodOrderer.OrderAnnotation;

// import io.restassured.RestAssured;
// import io.restassured.config.JsonConfig;
// import io.restassured.path.json.config.JsonPathConfig;
// import io.restassured.response.Response;
// import net.minidev.json.JSONObject;

// import static org.hamcrest.Matchers.*;
// import static io.restassured.config.RedirectConfig.redirectConfig;

// import static io.restassured.RestAssured.*;

// @TestMethodOrder(OrderAnnotation.class)
// public class C_AccountTest {

//     /**
//      *  All numbers are double except id (int).

//      * Account info:
//         {
//             "id": (auto-generated by your api),
//             "customer_id": 1234,
//             "balance": 50000.0,
//             "available_balance": 10000.0, (fund can be on-hold due to pending trades)
//         }
 
//      * Transfer transaction info:
//         {
//             "id": (auto-generated by your api),
//             "from": (sender_account_id),
//             "to": (receiver_account_id),
//             "amount": 5000.0
//         }
//      * 
//      */

//     @BeforeAll
//     public static void initClass() {
//         RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
//         RestAssured.useRelaxedHTTPSValidation();
//         RestAssured.urlEncodingEnabled = false;
//         RestAssured.config = RestAssured.config()
//             .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
//             .redirect(redirectConfig().followRedirects(false));
//     }

//     /**
//      * Test account creation
//      * @throws Exception
//      */
//     @Test
//     @Order(1)
//     public void testAddAccount_Valid_ReturnJson() throws Exception{
//         // add new account and get info
//         JSONObject requestParams = new JSONObject();
//         // each user can have different accounts
//         requestParams.put("customer_id", TestConstants.user_id_1);
//         requestParams.put("balance", TestConstants.account_balance_1);
        
//         // the available-balance will be computed based on any open buy trades
//         // so we do not specify it here
        
//         // Get newly created account id
//         TestConstants.account_id_1 = 
//         given().auth().basic(TestConstants.m_USERNAME, TestConstants.m_PASSWORD)
//                 .accept("*/*")
//                 .contentType("application/json")
//                 .body(requestParams.toJSONString())
//                 .post(TestConstants.accountURL)
//                 .then()
//                 .statusCode(201)
//                 .body("balance", equalTo(TestConstants.account_balance_1))
//                 .extract().path("id");

//         // view by user - unsuccessful due to no authentication
//          given().accept("*/*")
//                 .contentType("application/json")
//                 .get(TestConstants.accountURL + "/" + TestConstants.account_id_1)
//                 .then()
//                 .statusCode(401);

//         // view by analyst - forbidden
//         given().auth().basic(TestConstants.a1_USERNAME, TestConstants.a1_PASSWORD)
//                 .accept("*/*")
//                 .contentType("application/json")
//                 .get(TestConstants.accountURL + "/" + TestConstants.account_id_1)
//                 .then()
//                 .statusCode(403);

//         // view by this user - successful
//         given().auth().basic(TestConstants.u1_USERNAME, TestConstants.u1_PASSWORD)
//                 .accept("*/*")
//                 .contentType("application/json")
//                 .get(TestConstants.accountURL + "/" + TestConstants.account_id_1)
//                 .then()
//                 .statusCode(200)
//                 .contentType("application/json")
//                 .body("balance", equalTo(TestConstants.account_balance_1));
    
//     }

//     /**
//      * Test account creation: invalid data, return 400 - Bad Request
//      * @throws Exception
//      */
//     @Test
//     @Order(2)
//     public void testAddAccount_Invalid_Return400() throws Exception{
//         JSONObject requestParams = new JSONObject();
//         // invalid customer id (does not exist) - return 400 Bad Request
//         requestParams.put("customer_id", 987650);
//         requestParams.put("balance", 50000);

//         // available balance specified here will be igored by the API
//         requestParams.put("avail_balance", 100000);
            
//         given().auth().basic(TestConstants.m_USERNAME, TestConstants.m_PASSWORD)
//                 .accept("*/*")
//                 .contentType("application/json")
//                 .body(requestParams.toJSONString())
//                 .post(TestConstants.accountURL)
//                 .then()
//                 .statusCode(400);
//     }
    
//     /**
//      * Test transfer funds - success
//      * If invalid parameters specified for the transfer - return 400 Bad Request
//      * Transfer by posting to URL: accountURL + "/{accountId}/transactions"
//      */
//     @Test
//     @Order(3)
//     public void testTransfer_Valid_ReturnJson() throws Exception{
//         // First, create a new acccount for user2
//         JSONObject requestParams = new JSONObject();
//         requestParams.put("customer_id", TestConstants.user_id_2);
//         requestParams.put("balance", TestConstants.account_balance_2);
            
//         TestConstants.account_id_2 = 
//         given().auth().basic(TestConstants.m_USERNAME, TestConstants.m_PASSWORD)
//                 .accept("*/*")
//                 .contentType("application/json")
//                 .body(requestParams.toJSONString())
//                 .post(TestConstants.accountURL)
//                 .then()
//                 .statusCode(201)
//                 .body("balance", equalTo(TestConstants.account_balance_2))
//                 .extract().path("id");
        
//         // transfer from account of user1 to account of user2
//         double amount = 10000.0;
//         requestParams = new JSONObject();
//         requestParams.put("from", TestConstants.account_id_1);
//         requestParams.put("to", TestConstants.account_id_2);
//         // amount has to be > 0, otherwise it is a bad request (status 400)
//         requestParams.put("amount", amount);
//         given().auth().basic(TestConstants.u1_USERNAME, TestConstants.u1_PASSWORD)
//                 .accept("*/*")
//                 .contentType("application/json")
//                 .body(requestParams.toJSONString())
//                 .post(TestConstants.accountURL + "/" + TestConstants.account_id_1 + "/transactions")
//                 .then()
//                 .statusCode(201);
        
//         // check balance of user1's account
//         given().auth().basic(TestConstants.u1_USERNAME, TestConstants.u1_PASSWORD)
//                 .accept("*/*")
//                 .contentType("application/json")
//                 .get(TestConstants.accountURL + "/" + TestConstants.account_id_1)
//                 .then()
//                 .statusCode(200)
//                 .contentType("application/json")
//                 .body("balance", equalTo(TestConstants.account_balance_1 - amount));

//         // check balance of user2's acount
//         given().auth().basic(TestConstants.u2_USERNAME, TestConstants.u2_PASSWORD)
//                 .accept("*/*")
//                 .contentType("application/json")
//                 .get(TestConstants.accountURL + "/" + TestConstants.account_id_2)
//                 .then()
//                 .statusCode(200)
//                 .contentType("application/json")
//                 .body("balance", equalTo(TestConstants.account_balance_2 + amount));
//     }

//      /**
//      * Test transfer funds - invalid -- none existent recipient account
//      * If invalid parameters specified for the transfer - return 400 Bad Request
//      * Transfer by posting to URL: accountURL + "/{accountId}/transactions"
//      */
//     @Test
//     @Order(4)
//     public void testTransfer_InValidReceiver_Return400() throws Exception{

//         // transfer from account of user1 to account of user2
//         double amount = 10000.0;
//         JSONObject requestParams = new JSONObject();
//         requestParams.put("from", TestConstants.account_id_1);
//         requestParams.put("to", "-1");
//         // amount has to be > 0, otherwise it is a bad request (status 400)
//         requestParams.put("amount", amount);
//         given().auth().basic(TestConstants.u1_USERNAME, TestConstants.u1_PASSWORD)
//                 .accept("*/*")
//                 .contentType("application/json")
//                 .body(requestParams.toJSONString())
//                 .post(TestConstants.accountURL + "/" + TestConstants.account_id_1 + "/transactions")
//                 .then()
//                 .statusCode(400);
        
//         // check balance of user1's account
//         given().auth().basic(TestConstants.u1_USERNAME, TestConstants.u1_PASSWORD)
//                 .accept("*/*")
//                 .contentType("application/json")
//                 .get(TestConstants.accountURL + "/" + TestConstants.account_id_1)
//                 .then()
//                 .statusCode(200)
//                 .contentType("application/json")
//                 .body("balance", equalTo(TestConstants.account_balance_1 - amount));

//         // check balance of user2's acount
//         given().auth().basic(TestConstants.u2_USERNAME, TestConstants.u2_PASSWORD)
//                 .accept("*/*")
//                 .contentType("application/json")
//                 .get(TestConstants.accountURL + "/" + TestConstants.account_id_2)
//                 .then()
//                 .statusCode(200)
//                 .contentType("application/json")
//                 .body("balance", equalTo(TestConstants.account_balance_2 + amount));
//     }

//     /**
//      * Test transfer funds - invalid -- none existent sending account
//      * If invalid parameters specified for the transfer - return 400 Bad Request
//      * Transfer by posting to URL: accountURL + "/{accountId}/transactions"
//      */
//     @Test
//     @Order(5)
//     public void testTransfer_InValidSender_Return400() throws Exception{

//         // transfer from account of user1 to account of user2
//         double amount = 10000.0;
//         JSONObject requestParams = new JSONObject();
//         requestParams.put("from", "-1");
//         requestParams.put("to", TestConstants.account_id_1);
//         // amount has to be > 0, otherwise it is a bad request (status 400)
//         requestParams.put("amount", amount);
//         given().auth().basic(TestConstants.u1_USERNAME, TestConstants.u1_PASSWORD)
//                 .accept("*/*")
//                 .contentType("application/json")
//                 .body(requestParams.toJSONString())
//                 .post(TestConstants.accountURL + "/" + TestConstants.account_id_1 + "/transactions")
//                 .then()
//                 .statusCode(400);
        
//         // check balance of user1's account
//         given().auth().basic(TestConstants.u1_USERNAME, TestConstants.u1_PASSWORD)
//                 .accept("*/*")
//                 .contentType("application/json")
//                 .get(TestConstants.accountURL + "/" + TestConstants.account_id_1)
//                 .then()
//                 .statusCode(200)
//                 .contentType("application/json")
//                 .body("balance", equalTo(TestConstants.account_balance_1 - amount));

//         // check balance of user2's acount
//         given().auth().basic(TestConstants.u2_USERNAME, TestConstants.u2_PASSWORD)
//                 .accept("*/*")
//                 .contentType("application/json")
//                 .get(TestConstants.accountURL + "/" + TestConstants.account_id_2)
//                 .then()
//                 .statusCode(200)
//                 .contentType("application/json")
//                 .body("balance", equalTo(TestConstants.account_balance_2 + amount));
//     }


//     /**
//      * Test transfer funds - invalid -- none existent sending account
//      * If invalid parameters specified for the transfer - return 400 Bad Request
//      * Transfer by posting to URL: accountURL + "/{accountId}/transactions"
//      */
//     @Test
//     @Order(6)
//     public void testTransfer_InValidAmount_Return400() throws Exception{

//         // transfer from account of user1 to account of user2
//         double amount = -10000.0;
//         JSONObject requestParams = new JSONObject();
//         requestParams.put("from", TestConstants.account_id_1);
//         requestParams.put("to", TestConstants.account_id_2);
//         // amount has to be > 0, otherwise it is a bad request (status 400)
//         requestParams.put("amount", amount);
//         given().auth().basic(TestConstants.u1_USERNAME, TestConstants.u1_PASSWORD)
//                 .accept("*/*")
//                 .contentType("application/json")
//                 .body(requestParams.toJSONString())
//                 .post(TestConstants.accountURL + "/" + TestConstants.account_id_1 + "/transactions")
//                 .then()
//                 .statusCode(400);
        
//                 //switched signs cuz the amount is negative
//         // check balance of user1's account
//         given().auth().basic(TestConstants.u1_USERNAME, TestConstants.u1_PASSWORD)
//                 .accept("*/*")
//                 .contentType("application/json")
//                 .get(TestConstants.accountURL + "/" + TestConstants.account_id_1)
//                 .then()
//                 .statusCode(200)
//                 .contentType("application/json")
//                 .body("balance", equalTo(TestConstants.account_balance_1 + amount));

//         // check balance of user2's acount
//         given().auth().basic(TestConstants.u2_USERNAME, TestConstants.u2_PASSWORD)
//                 .accept("*/*")
//                 .contentType("application/json")
//                 .get(TestConstants.accountURL + "/" + TestConstants.account_id_2)
//                 .then()
//                 .statusCode(200)
//                 .contentType("application/json")
//                 .body("balance", equalTo(TestConstants.account_balance_2 - amount));
//     }

    
//     /**
//      * Test transfer funds - invalid -- sending account is not owned by person transferring
//      * If invalid parameters specified for the transfer - return 400 Bad Request
//      * Transfer by posting to URL: accountURL + "/{accountId}/transactions"
//      */
//     @Test
//     @Order(7)
//     public void testTransfer_InValidSendingAccount_Return400() throws Exception{

//         // transfer from account of user1 to account of user2
//         double amount = 10000.0;
//         JSONObject requestParams = new JSONObject();
//         requestParams.put("from", TestConstants.account_id_2);
//         requestParams.put("to", TestConstants.account_id_1);
//         // amount has to be > 0, otherwise it is a bad request (status 400)
//         requestParams.put("amount", amount);
//         given().auth().basic(TestConstants.u1_USERNAME, TestConstants.u1_PASSWORD)
//                 .accept("*/*")
//                 .contentType("application/json")
//                 .body(requestParams.toJSONString())
//                 .post(TestConstants.accountURL + "/" + TestConstants.account_id_1 + "/transactions")
//                 .then()
//                 .statusCode(403);
        
//         // check balance of user1's account
//         given().auth().basic(TestConstants.u1_USERNAME, TestConstants.u1_PASSWORD)
//                 .accept("*/*")
//                 .contentType("application/json")
//                 .get(TestConstants.accountURL + "/" + TestConstants.account_id_1)
//                 .then()
//                 .statusCode(200)
//                 .contentType("application/json")
//                 .body("balance", equalTo(TestConstants.account_balance_1 - amount));

//         // check balance of user2's acount
//         given().auth().basic(TestConstants.u2_USERNAME, TestConstants.u2_PASSWORD)
//                 .accept("*/*")
//                 .contentType("application/json")
//                 .get(TestConstants.accountURL + "/" + TestConstants.account_id_2)
//                 .then()
//                 .statusCode(200)
//                 .contentType("application/json")
//                 .body("balance", equalTo(TestConstants.account_balance_2 + amount));
//     }


//     /**
//      * Test transfer funds - invalid -- sending amount is greater than the available balance
//      * If invalid parameters specified for the transfer - return 400 Bad Request
//      * Transfer by posting to URL: accountURL + "/{accountId}/transactions"
//      */
//     @Test
//     @Order(8)
//     public void testTransfer_InValidSendingAmount_Return400() throws Exception{

//         // add new account and get info
//         JSONObject requestParams = new JSONObject();
//         // each user can have different accounts
//         requestParams.put("customer_id", TestConstants.user_id_1);
//         requestParams.put("balance", TestConstants.account_balance_2);
        
//         // the available-balance will be computed based on any open buy trades
//         // so we do not specify it here
        
//         // Get newly created account id
//         Integer new_account_id = 
//         given().auth().basic(TestConstants.m_USERNAME, TestConstants.m_PASSWORD)
//                 .accept("*/*")
//                 .contentType("application/json")
//                 .body(requestParams.toJSONString())
//                 .post(TestConstants.accountURL)
//                 .then()
//                 .statusCode(201)
//                 .body("balance", equalTo(TestConstants.account_balance_2))
//                 .extract().path("id");


                

//         // transfer from account of user1 to account of user2
//         double amount = 10000.0;
//         requestParams = new JSONObject();
//         requestParams.put("from", new_account_id);
//         requestParams.put("to", TestConstants.account_id_2);
//         // amount has to be > 0, otherwise it is a bad request (status 400)
//         requestParams.put("amount", TestConstants.account_balance_2 + 1);
//         given().auth().basic(TestConstants.u1_USERNAME, TestConstants.u1_PASSWORD)
//                 .accept("*/*")
//                 .contentType("application/json")
//                 .body(requestParams.toJSONString())
//                 .post(TestConstants.accountURL + "/" + TestConstants.account_id_1 + "/transactions")
//                 .then()
//                 .statusCode(400);
        
//         // check balance of user1's account
//         given().auth().basic(TestConstants.u1_USERNAME, TestConstants.u1_PASSWORD)
//                 .accept("*/*")
//                 .contentType("application/json")
//                 .get(TestConstants.accountURL + "/" + new_account_id)
//                 .then()
//                 .statusCode(200)
//                 .contentType("application/json")
//                 .body("balance", equalTo(TestConstants.account_balance_2));

                
//                 // check balance of user2's acount
//         given().auth().basic(TestConstants.u2_USERNAME, TestConstants.u2_PASSWORD)
//         .accept("*/*")
//         .contentType("application/json")
//         .get(TestConstants.accountURL + "/" + TestConstants.account_id_2)
//         .then()
//         .statusCode(200)
//         .contentType("application/json")
//         .body("balance", equalTo(TestConstants.account_balance_2 + amount));
        
//     }


// /**
//      * View  other people's accounts
//      * @throws Exception
//      */
//     @Test
//     @Order(11)
//     public void testViewAccount_InValid_Return403() throws Exception{
        

//         // view other users - unsuccessful
//         given().auth().basic(TestConstants.u1_USERNAME, TestConstants.u1_PASSWORD)
//                 .accept("*/*")
//                 .contentType("application/json")
//                 .get(TestConstants.accountURL + "/" + TestConstants.account_id_2)
//                 .then()
//                 .statusCode(403);
    
//     }

    
// /**
//      * View transactions success
//      * @throws Exception
//      */
//     @Test
//     @Order(12)
//     public void testViewTransactions_Valid_ReturnJson() throws Exception{
        

//         // view other users - unsuccessful
//         given().auth().basic(TestConstants.u1_USERNAME, TestConstants.u1_PASSWORD)
//                 .accept("*/*")
//                 .contentType("application/json")
//                 .get(TestConstants.accountURL + "/" + TestConstants.account_id_1 + "/transactions")
//                 .then()
//                 .statusCode(200)
//                 .contentType("application/json");
    
//     }

//     /**
//      * View other people's transactions -- failure
//      * @throws Exception
//      */
//     @Test
//     @Order(13)
//     public void testViewTransactions_InValid_Return403() throws Exception{
        

//         // view other users - unsuccessful
//         given().auth().basic(TestConstants.u1_USERNAME, TestConstants.u1_PASSWORD)
//                 .accept("*/*")
//                 .contentType("application/json")
//                 .get(TestConstants.accountURL + "/" + TestConstants.account_id_2 + "/transactions")
//                 .then()
//                 .statusCode(403);
    
//     }

//     /**
//      * Test transfer funds - success
//      * If invalid parameters specified for the transfer - return 400 Bad Request
//      * Transfer by posting to URL: accountURL + "/{accountId}/transactions"
//      */
//     @Test
//     @Order(14)
//     public void testTransfer2_Valid_ReturnJson() throws Exception{
        
//         // transfer from account of user1 to account of user2
//         double amount = 10000.0;
//         JSONObject requestParams = new JSONObject();
//         requestParams.put("from", TestConstants.account_id_2);
//         requestParams.put("to", TestConstants.account_id_1);
//         // amount has to be > 0, otherwise it is a bad request (status 400)
//         requestParams.put("amount", amount);
//         given().auth().basic(TestConstants.u2_USERNAME, TestConstants.u2_PASSWORD)
//                 .accept("*/*")
//                 .contentType("application/json")
//                 .body(requestParams.toJSONString())
//                 .post(TestConstants.accountURL + "/" + TestConstants.account_id_2 + "/transactions")
//                 .then()
//                 .statusCode(201);
//     }

//     /**
//      * Test account creation, ensure customer cannot create accounts
//      * @throws Exception
//      */
//     @Test
//     @Order(15)
//     public void testAddAccount_InValidPermission_Return403() throws Exception{
//         // add new account and get info
//         JSONObject requestParams = new JSONObject();
//         // each user can have different accounts
//         requestParams.put("customer_id", TestConstants.user_id_1);
//         requestParams.put("balance", TestConstants.account_balance_1);

//         given().auth().basic(TestConstants.u1_USERNAME, TestConstants.u1_PASSWORD)
//                 .accept("*/*")
//                 .contentType("application/json")
//                 .body(requestParams.toJSONString())
//                 .post(TestConstants.accountURL)
//                 .then()
//                 .statusCode(403);

//     }
// }
